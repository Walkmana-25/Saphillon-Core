// @generated
// This file is @generated by prost-build.
/// Describes a single permission requirement or grant for a specific resource.
/// Usage:
/// - Include in APIs (e.g., workflow or plugin definitions) to declare needed permissions.
/// - Use in policy evaluation to check whether a caller is authorized.
///
/// Fields:
/// - display_name: Human-readable name shown in UIs (e.g., "Read File").
/// - description: Longer explanation of the permission's purpose.
/// - permission_type: Action category (read, write, execute).
/// - resource: Resource identifiers this permission applies to. Free-form in v1.
/// - permission_level: Sensitivity level to inform review and approval.
///
/// Example:
///    Permission {
///      display_name: "Execute Workflow"
///      description: "Runs the daily ETL pipeline"
///      permission_type: PERMISSION_TYPE_EXECUTE
///      resource: \["workflows/etl_daily"\]
///      permission_level: PERMISSION_LEVEL_HIGH
///    }
///
/// Field behavior notes:
/// - display_name: Recommended.
/// - description: Recommended.
/// - permission_type: Required.
/// - resource: Optional; when omitted applies broadly.
/// - permission_level: Recommended; some features may require it.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Permission {
    /// Human-readable name of the permission, suitable for display in UIs.
    /// Example: "Read File", "Execute Workflow".
    #[prost(string, tag="1")]
    pub display_name: ::prost::alloc::string::String,
    /// Detailed description of what the permission allows and when it is used.
    /// Keep concise but informative for reviewers and users.
    #[prost(string, tag="2")]
    pub description: ::prost::alloc::string::String,
    /// The action category this permission authorizes.
    /// Behavior: Required.
    #[prost(enumeration="PermissionType", tag="3")]
    pub permission_type: i32,
    /// Resource identifiers this permission applies to.
    /// Format: Free-form strings in v1 (e.g., "file.txt", "workflows/etl_daily", "buckets/logs").
    /// Behavior: Optional. If empty, applies broadly and should be used with caution.
    /// Example: \["projects/proj-123/locations/us/workflows/etl_daily"\]
    #[prost(string, repeated, tag="4")]
    pub resource: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The sensitivity or criticality level associated with this permission.
    /// Behavior: Recommended. Some approval flows may require a minimum level.
    #[prost(enumeration="PermissionLevel", tag="5")]
    pub permission_level: i32,
}
/// Enumerates the type of action a permission authorizes.
/// Values:
/// - PERMISSION_TYPE_UNSPECIFIED: Default value. Do not use.
/// - PERMISSION_TYPE_READ: Grants read-only access to the resource.
/// - PERMISSION_TYPE_WRITE: Grants write or modify access to the resource.
/// - PERMISSION_TYPE_EXECUTE: Grants ability to execute or invoke the resource (e.g., run a workflow).
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PermissionType {
    /// Default value. Do not use.
    Unspecified = 0,
    /// Grants read-only access to the resource (e.g., fetch, list, inspect).
    Read = 1,
    /// Grants write or modify access to the resource (e.g., create, update, delete).
    Write = 2,
    /// Grants ability to execute or invoke the resource (e.g., run, trigger).
    Execute = 3,
}
impl PermissionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PermissionType::Unspecified => "PERMISSION_TYPE_UNSPECIFIED",
            PermissionType::Read => "PERMISSION_TYPE_READ",
            PermissionType::Write => "PERMISSION_TYPE_WRITE",
            PermissionType::Execute => "PERMISSION_TYPE_EXECUTE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PERMISSION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PERMISSION_TYPE_READ" => Some(Self::Read),
            "PERMISSION_TYPE_WRITE" => Some(Self::Write),
            "PERMISSION_TYPE_EXECUTE" => Some(Self::Execute),
            _ => None,
        }
    }
}
/// Indicates the sensitivity or criticality level required for a permission.
/// The level may be used by policy engines, reviewers, or UI to require stronger approval.
/// Values:
/// - PERMISSION_LEVEL_UNSPECIFIED: Default value. Do not use.
/// - PERMISSION_LEVEL_MEDIUM: Standard operations with moderate impact.
/// - PERMISSION_LEVEL_HIGH: Operations with elevated risk or broader impact.
/// - PERMISSION_LEVEL_CRITICAL: Operations that can cause system-wide effects or data loss.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PermissionLevel {
    /// Default value. Do not use.
    Unspecified = 0,
    /// Standard operations with moderate impact.
    Medium = 1,
    /// Operations with elevated risk or broader impact.
    High = 2,
    /// Operations that can cause system-wide effects or data loss.
    Critical = 3,
}
impl PermissionLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PermissionLevel::Unspecified => "PERMISSION_LEVEL_UNSPECIFIED",
            PermissionLevel::Medium => "PERMISSION_LEVEL_MEDIUM",
            PermissionLevel::High => "PERMISSION_LEVEL_HIGH",
            PermissionLevel::Critical => "PERMISSION_LEVEL_CRITICAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PERMISSION_LEVEL_UNSPECIFIED" => Some(Self::Unspecified),
            "PERMISSION_LEVEL_MEDIUM" => Some(Self::Medium),
            "PERMISSION_LEVEL_HIGH" => Some(Self::High),
            "PERMISSION_LEVEL_CRITICAL" => Some(Self::Critical),
            _ => None,
        }
    }
}
/// Describes a callable function exposed by a plugin.
/// A function declares its purpose, identity, and required permissions for execution.
///
/// Fields:
/// - function_id: Stable unique identifier used by systems to reference the function.
/// - function_name: Human-friendly name suitable for UIs.
/// - description: Summary of what the function does and typical use cases.
/// - permissions: Permissions required for the caller to execute this function.
///
/// Example:
///    PluginFunction {
///      function_id: "send_notification"
///      function_name: "Send Notification"
///      description: "Sends a message to a configured channel"
///      permissions: \[{ permission_type: PERMISSION_TYPE_EXECUTE, resource: ["channels/general"\] }]
///    }
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginFunction {
    /// Stable unique identifier for the function.
    /// Behavior: Required. Must be unique within the plugin package.
    #[prost(string, tag="1")]
    pub function_id: ::prost::alloc::string::String,
    /// Human-friendly display name of the function.
    /// Example: "Send Notification".
    #[prost(string, tag="2")]
    pub function_name: ::prost::alloc::string::String,
    /// Short description of what the function does and when to use it.
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    /// Permissions required to execute this function successfully.
    /// Use Permission.resource to scope to specific entities as needed.
    #[prost(message, repeated, tag="4")]
    pub permissions: ::prost::alloc::vec::Vec<Permission>,
}
/// Represents a plugin package that can be installed into the platform.
/// A plugin groups one or more functions and includes metadata useful for discovery and governance.
///
/// Fields:
/// - package_id: Stable unique identifier of the plugin package.
/// - package_name: Human-friendly name of the plugin.
/// - package_version: Semantic version string (e.g., "1.2.3").
/// - description: Summary of the plugin's purpose and capabilities.
/// - functions: Functions exposed by this plugin.
/// - plugin_store_url: URL to the plugin page or documentation.
/// - internal_plugin: Indicates whether the plugin is internal-only.
/// - verified: Indicates whether the plugin is verified by the platform.
///
/// - deprecated: Indicates whether the plugin is deprecated and should not be used for new workflows.
/// - installed_at: Time when the plugin was installed.
/// - updated_at: Time when the plugin was last updated.
///
/// Example:
///    PluginPackage {
///      package_id: "com.example.notifications"
///      package_name: "Notifications"
///      package_version: "1.4.0"
///      description: "Provides functions for sending notifications"
///      plugin_store_url: "<https://plugins.example.com/com.example.notifications">
///      verified: true
///      functions: \[{ function_id: "send_notification", ... }\]
///    }
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginPackage {
    /// Stable unique identifier for the plugin package.
    /// Behavior: Required; unique across all installed plugins.
    #[prost(string, tag="1")]
    pub package_id: ::prost::alloc::string::String,
    /// Human-friendly name of the plugin package.
    /// Example: "Notifications".
    #[prost(string, tag="2")]
    pub package_name: ::prost::alloc::string::String,
    /// Semantic version of the plugin package.
    /// Format: "MAJOR.MINOR.PATCH" (e.g., "1.0.3").
    #[prost(string, tag="3")]
    pub package_version: ::prost::alloc::string::String,
    /// Description of the plugin's purpose and capabilities.
    #[prost(string, tag="4")]
    pub description: ::prost::alloc::string::String,
    /// Functions exposed by this plugin.
    #[prost(message, repeated, tag="5")]
    pub functions: ::prost::alloc::vec::Vec<PluginFunction>,
    /// URL to the plugin's store page or documentation.
    /// Example: "<https://plugins.example.com/com.example.notifications".>
    #[prost(string, tag="6")]
    pub plugin_store_url: ::prost::alloc::string::String,
    /// Whether this plugin is intended for internal use only.
    /// Behavior: Optional. Defaults to false when unset.
    #[prost(bool, optional, tag="7")]
    pub internal_plugin: ::core::option::Option<bool>,
    /// Whether this plugin has been verified by the platform or publisher.
    /// Behavior: Optional. Defaults to false when unset.
    #[prost(bool, optional, tag="8")]
    pub verified: ::core::option::Option<bool>,
    /// Whether this plugin is deprecated. New usage should be avoided.
    /// Behavior: Optional. When true, UIs should display warnings.
    #[prost(bool, optional, tag="9")]
    pub deprecated: ::core::option::Option<bool>,
    /// Time when the plugin was installed.
    #[prost(message, optional, tag="10")]
    pub installed_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Time when the plugin metadata or package was last updated.
    #[prost(message, optional, tag="11")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// Represents application version information.
/// The version string typically follows Semantic Versioning.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Version {
    /// The version of the application.
    /// Format: "vMAJOR.MINOR.PATCH" with optional pre-release or build metadata
    /// (e.g., "v1.2.3", "v1.2.3-alpha-1", "v1.2.3-beta.1").
    #[prost(string, tag="1")]
    pub version: ::prost::alloc::string::String,
}
/// Request for GetVersion.
/// This message is intentionally empty to allow future extensibility without breaking changes.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetVersionRequest {
}
/// Response for GetVersion.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVersionResponse {
    /// The current application version.
    #[prost(message, optional, tag="1")]
    pub version: ::core::option::Option<Version>,
}
/// Represents a specific revision of workflow source code and metadata.
///
/// Fields:
/// - id: Stable identifier of the workflow code entity.
/// - code_revision: Monotonic integer representing the code version within the workflow.
/// - code: The source code text.
/// - language: The language of the code.
/// - created_at: Timestamp when this code revision was created.
/// - result: Optional preview or last run result associated with this code revision.
/// - required_permissions: Permissions required to run this code (declared by the author).
///
/// Notes:
/// - code_revision should increase by 1 for each new revision of the same workflow.
/// - required_permissions should be kept minimal and specific to support principle of least privilege.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkflowCode {
    /// Stable identifier of the workflow code entity.
    /// Format: UUID.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Monotonic integer representing the code version within the workflow.
    /// Behavior: Required. Starts at 1 and increments with each change.
    #[prost(int32, tag="2")]
    pub code_revision: i32,
    /// The workflow source code.
    #[prost(string, tag="3")]
    pub code: ::prost::alloc::string::String,
    /// The programming language of the source code.
    #[prost(enumeration="WorkflowLanguage", tag="4")]
    pub language: i32,
    /// Creation time of this code revision.
    #[prost(message, optional, tag="5")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional result previews or cached outputs associated with this code revision.
    /// Behavior: Optional. May be empty when no run has occurred. Can store multiple results.
    #[prost(message, repeated, tag="6")]
    pub result: ::prost::alloc::vec::Vec<WorkflowResult>,
    /// Permissions required to execute this workflow code.
    /// Use specific Permission.resource values to scope access where possible.
    #[prost(message, repeated, tag="7")]
    pub required_permissions: ::prost::alloc::vec::Vec<Permission>,
    /// Plugin packages that this workflow code depends on.
    /// This allows the workflow to use functions defined in these plugins.
    #[prost(message, repeated, tag="8")]
    pub plugin_packages: ::prost::alloc::vec::Vec<PluginPackage>,
    /// Plugin functions that this workflow code directly uses.
    #[prost(string, repeated, tag="9")]
    pub plugin_function_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Captures the result of running a workflow at a specific code revision.
///
/// Fields:
/// - id: Identifier of the result record.
/// - display_name: Human-friendly name for UIs (e.g., "Nightly Run 2025-08-05").
/// - description: Summary of the execution and relevant details.
/// - result: Raw result payload or textual summary.
/// - ran_at: Time the execution completed.
/// - result_type: Success or failure classification.
/// - exit_code: Process exit code when applicable (0 for success).
/// - workflow_code_revision: The code revision that produced this result.
/// - workflow_result_revision: Monotonic revision of this result record itself.
///
/// TODO: Add structured data types for results (logs, metrics, artifacts).
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkflowResult {
    /// Identifier of the result record.
    /// Format: UUID.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Human-friendly name for display.
    #[prost(string, tag="2")]
    pub display_name: ::prost::alloc::string::String,
    /// Summary of the execution and relevant details.
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    /// Raw result payload or textual summary of the run.
    #[prost(string, tag="4")]
    pub result: ::prost::alloc::string::String,
    /// Time the execution completed.
    #[prost(message, optional, tag="5")]
    pub ran_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Success or failure classification.
    #[prost(enumeration="WorkflowResultType", tag="6")]
    pub result_type: i32,
    /// Process exit code when applicable (0 for success).
    #[prost(int32, tag="7")]
    pub exit_code: i32,
    /// Monotonic revision of this result record.
    #[prost(int32, tag="9")]
    pub workflow_result_revision: i32,
}
/// Represents a workflow entity including its code history and execution results.
///
/// Fields:
/// - id: Stable identifier for the workflow.
/// - display_name: Human-readable name.
/// - description: Purpose and summary of the workflow.
/// - workflow_language: Preferred or primary language used by this workflow.
/// - workflow_code: History of code revisions (latest may be last element or determined externally).
/// - created_at: Time the workflow was created.
/// - updated_at: Time the workflow was last modified.
/// - workflow_results: Historical execution results for this workflow.
///
/// Notes:
/// - Keep workflow_code revisions append-only to preserve history.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Workflow {
    /// Stable identifier for the workflow.
    /// Format: UUID.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Human-readable name for the workflow.
    #[prost(string, tag="2")]
    pub display_name: ::prost::alloc::string::String,
    /// Description of the workflow's purpose and behavior.
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    /// Preferred or primary language used by this workflow.
    #[prost(enumeration="WorkflowLanguage", tag="4")]
    pub workflow_language: i32,
    /// History of workflow code revisions.
    #[prost(message, repeated, tag="5")]
    pub workflow_code: ::prost::alloc::vec::Vec<WorkflowCode>,
    /// Creation time of the workflow.
    #[prost(message, optional, tag="6")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Last update time of the workflow.
    #[prost(message, optional, tag="7")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Historical execution results for this workflow.
    #[prost(message, repeated, tag="8")]
    pub workflow_results: ::prost::alloc::vec::Vec<WorkflowResult>,
}
/// Enumerates supported workflow source languages.
/// Used to indicate the language of WorkflowCode.code.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WorkflowLanguage {
    /// Default value. Do not use.
    Unspecified = 0,
    /// TypeScript source code.
    Typescript = 1,
    /// JavaScript source code.
    Javascript = 2,
}
impl WorkflowLanguage {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WorkflowLanguage::Unspecified => "WORKFLOW_LANGUAGE_UNSPECIFIED",
            WorkflowLanguage::Typescript => "WORKFLOW_LANGUAGE_TYPESCRIPT",
            WorkflowLanguage::Javascript => "WORKFLOW_LANGUAGE_JAVASCRIPT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORKFLOW_LANGUAGE_UNSPECIFIED" => Some(Self::Unspecified),
            "WORKFLOW_LANGUAGE_TYPESCRIPT" => Some(Self::Typescript),
            "WORKFLOW_LANGUAGE_JAVASCRIPT" => Some(Self::Javascript),
            _ => None,
        }
    }
}
/// Classifies the outcome of a workflow execution.
/// Values:
/// - WORKFLOW_RESULT_TYPE_SUCCESS_UNSPECIFIED: Execution completed successfully.
/// - WORKFLOW_RESULT_TYPE_FAILURE: Execution failed (see exit_code and description).
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WorkflowResultType {
    /// Execution completed successfully.
    SuccessUnspecified = 0,
    /// Execution failed.
    Failure = 1,
}
impl WorkflowResultType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WorkflowResultType::SuccessUnspecified => "WORKFLOW_RESULT_TYPE_SUCCESS_UNSPECIFIED",
            WorkflowResultType::Failure => "WORKFLOW_RESULT_TYPE_FAILURE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORKFLOW_RESULT_TYPE_SUCCESS_UNSPECIFIED" => Some(Self::SuccessUnspecified),
            "WORKFLOW_RESULT_TYPE_FAILURE" => Some(Self::Failure),
            _ => None,
        }
    }
}
/// Request to generate a workflow from a natural language prompt.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateWorkflowRequest {
    /// Natural language prompt describing the desired workflow.
    /// Example: "Check the weather, and if it's raining, send me a notification."
    /// Behavior: Required; must be non-empty.
    #[prost(string, tag="1")]
    pub prompt: ::prost::alloc::string::String,
}
/// Server-streamed response containing the generated workflow definition.
/// Each streamed message may be partial; the client should merge or replace as appropriate.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateWorkflowResponse {
    /// Structured workflow definition.
    /// Format: String-encoded structure such as JSON or YAML.
    /// Example (JSON):
    ///    {"steps":\[{"id":"check_weather"},{"id":"notify","if":"raining"}\]}
    #[prost(string, tag="1")]
    pub workflow_definition: ::prost::alloc::string::String,
    /// The status of the response.
    /// If the status is not OK, it indicates an error.
    #[prost(message, optional, tag="2")]
    pub status: ::core::option::Option<super::super::google::rpc::Status>,
}
/// Request to fix a workflow definition using a problem description.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FixWorkflowRequest {
    /// The workflow definition to be fixed.
    /// Format: JSON, YAML, or another structured text representation.
    /// Behavior: Required; must be parseable by the service.
    #[prost(string, tag="1")]
    pub workflow_definition: ::prost::alloc::string::String,
    /// Description of issues to fix or constraints to apply.
    /// Example: "Step IDs must be unique; add retry to notification step."
    /// Behavior: Required; must be non-empty.
    #[prost(string, tag="2")]
    pub description: ::prost::alloc::string::String,
}
/// Server-streamed response carrying fixed workflow definitions and a change summary.
/// The final message typically represents the complete fixed definition.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FixWorkflowResponse {
    /// The fixed workflow definition.
    /// Format: JSON, YAML, or another structured text representation.
    #[prost(string, tag="1")]
    pub fixed_workflow_definition: ::prost::alloc::string::String,
    /// Summary of changes applied to produce the fixed definition.
    /// Example: "Renamed duplicate step IDs; added retry policy to 'notify'."
    #[prost(string, tag="2")]
    pub change_summary: ::prost::alloc::string::String,
    /// The status of the response.
    /// If the status is not OK, it indicates an error.
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<super::super::google::rpc::Status>,
}
include!("sapphillon.v1.tonic.rs");
// @@protoc_insertion_point(module)